{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jacob\\\\Desktop\\\\ph-timecard\\\\ph-timecard\\\\my-app\\\\src\\\\componets\\\\FillerButton.js\";\nimport React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport FileSaver from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SavePDF = props => {\n  console.log(props);\n\n  const fillForm = async props => {\n    // let fileReader = new FileReader();\n    console.log(props);\n    const url = props.pdf;\n    const formPdfBytes = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/pdf'\n      }\n    }).then(res => {\n      console.log(res.headers);\n      return res.arrayBuffer();\n    }); // fileReader.onload = function(e) {\n    //     // The file's text will be printed here\n    //     console.log(e.target.result)\n    //   };\n\n    const pdfDoc = await PDFDocument.load(formPdfBytes);\n    const form = pdfDoc.getForm();\n    const pdfBytes = await pdfDoc.save();\n    props.setUpdatedPDF(pdfBytes);\n    let blob = new Blob(pdfBytes, {\n      type: \"application/pdf;charset=utf-8\"\n    });\n    FileSaver.saveAs(blob, \"pdf-lib_form_creation_example.pdf\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: fillForm,\n      children: \"Fill PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 13\n  }, this);\n};\n\n_c = SavePDF;\nexport default SavePDF;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavePDF\");","map":{"version":3,"sources":["C:/Users/Jacob/Desktop/ph-timecard/ph-timecard/my-app/src/componets/FillerButton.js"],"names":["React","useState","PDFDocument","FileSaver","SavePDF","props","console","log","fillForm","url","pdf","formPdfBytes","fetch","headers","then","res","arrayBuffer","pdfDoc","load","form","getForm","pdfBytes","save","setUpdatedPDF","blob","Blob","type","saveAs"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAGA,MAAMC,OAAO,GAAKC,KAAD,IAAW;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAEA,QAAMG,QAAQ,GAAG,MAAOH,KAAP,IAAiB;AAC9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMI,GAAG,GAAGJ,KAAK,CAACK,GAAlB;AACA,UAAMC,YAAY,GAAG,MAAMC,KAAK,CAACH,GAAD,EAChC;AAACI,MAAAA,OAAO,EAAC;AAAC,wBAAe;AAAhB;AAAT,KADgC,CAAL,CAEtBC,IAFsB,CAEjBC,GAAG,IAAI;AACTT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACF,OAAhB;AACA,aAAQE,GAAG,CAACC,WAAJ,EAAR;AAA2B,KAJR,CAA3B,CAJ8B,CAS9B;AACA;AACA;AACA;;AAEA,UAAMC,MAAM,GAAG,MAAMf,WAAW,CAACgB,IAAZ,CAAiBP,YAAjB,CAArB;AAEA,UAAMQ,IAAI,GAAGF,MAAM,CAACG,OAAP,EAAb;AAEA,UAAMC,QAAQ,GAAG,MAAMJ,MAAM,CAACK,IAAP,EAAvB;AACAjB,IAAAA,KAAK,CAACkB,aAAN,CAAoBF,QAApB;AACA,QAAIG,IAAI,GAAG,IAAIC,IAAJ,CAASJ,QAAT,EAAmB;AAACK,MAAAA,IAAI,EAAE;AAAP,KAAnB,CAAX;AACAvB,IAAAA,SAAS,CAACwB,MAAV,CAAiBH,IAAjB,EAAuB,mCAAvB;AACH,GAtBD;;AAwBA,sBAAQ;AAAA,2BACI;AAAQ,MAAA,OAAO,EAAEhB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAAR;AAGH,CA9BD;;KAAMJ,O;AAgCN,eAAeA,OAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport { PDFDocument } from 'pdf-lib';\r\nimport FileSaver from 'file-saver';\r\n\r\n\r\nconst SavePDF  = (props) => {\r\n    console.log(props)\r\n\r\n    const fillForm = async (props) => {\r\n        // let fileReader = new FileReader();\r\n        console.log(props)\r\n        const url = props.pdf;\r\n        const formPdfBytes = await fetch(url,\r\n        {headers:{'Content-Type':'application/pdf'}})\r\n            .then(res => {\r\n                console.log(res.headers)\r\n                return (res.arrayBuffer())})\r\n        // fileReader.onload = function(e) {\r\n        //     // The file's text will be printed here\r\n        //     console.log(e.target.result)\r\n        //   };\r\n        \r\n        const pdfDoc = await PDFDocument.load(formPdfBytes);\r\n\r\n        const form = pdfDoc.getForm();\r\n    \r\n        const pdfBytes = await pdfDoc.save();\r\n        props.setUpdatedPDF(pdfBytes);\r\n        let blob = new Blob(pdfBytes, {type: \"application/pdf;charset=utf-8\"})      \r\n        FileSaver.saveAs(blob, \"pdf-lib_form_creation_example.pdf\");\r\n    }\r\n\r\n    return (<div>\r\n                <button onclick={fillForm}>Fill PDF</button>\r\n            </div>);\r\n}\r\n\r\nexport default SavePDF;"]},"metadata":{},"sourceType":"module"}